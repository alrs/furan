// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dollarshaveclub/furan/lib/metrics (interfaces: MetricsCollector)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of MetricsCollector interface
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *_MockMetricsCollectorRecorder
}

// Recorder for MockMetricsCollector (not exported)
type _MockMetricsCollectorRecorder struct {
	mock *MockMetricsCollector
}

func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &_MockMetricsCollectorRecorder{mock}
	return mock
}

func (_m *MockMetricsCollector) EXPECT() *_MockMetricsCollectorRecorder {
	return _m.recorder
}

func (_m *MockMetricsCollector) BuildFailed(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "BuildFailed", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) BuildFailed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildFailed", arg0, arg1)
}

func (_m *MockMetricsCollector) BuildStarted(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "BuildStarted", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) BuildStarted(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildStarted", arg0, arg1)
}

func (_m *MockMetricsCollector) BuildSucceeded(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "BuildSucceeded", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) BuildSucceeded(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildSucceeded", arg0, arg1)
}

func (_m *MockMetricsCollector) DiskFree(_param0 uint64) error {
	ret := _m.ctrl.Call(_m, "DiskFree", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) DiskFree(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DiskFree", arg0)
}

func (_m *MockMetricsCollector) Duration(_param0 string, _param1 string, _param2 string, _param3 []string, _param4 float64) error {
	ret := _m.ctrl.Call(_m, "Duration", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) Duration(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Duration", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMetricsCollector) FileNodesFree(_param0 uint64) error {
	ret := _m.ctrl.Call(_m, "FileNodesFree", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) FileNodesFree(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FileNodesFree", arg0)
}

func (_m *MockMetricsCollector) Float(_param0 string, _param1 string, _param2 string, _param3 []string, _param4 float64) error {
	ret := _m.ctrl.Call(_m, "Float", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) Float(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Float", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMetricsCollector) GCBytesReclaimed(_param0 uint64) error {
	ret := _m.ctrl.Call(_m, "GCBytesReclaimed", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) GCBytesReclaimed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GCBytesReclaimed", arg0)
}

func (_m *MockMetricsCollector) GCFailure() error {
	ret := _m.ctrl.Call(_m, "GCFailure")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) GCFailure() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GCFailure")
}

func (_m *MockMetricsCollector) GCUntaggedImageRemoved() error {
	ret := _m.ctrl.Call(_m, "GCUntaggedImageRemoved")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) GCUntaggedImageRemoved() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GCUntaggedImageRemoved")
}

func (_m *MockMetricsCollector) ImageSize(_param0 int64, _param1 int64, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "ImageSize", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) ImageSize(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageSize", arg0, arg1, arg2, arg3)
}

func (_m *MockMetricsCollector) KafkaConsumerFailure() error {
	ret := _m.ctrl.Call(_m, "KafkaConsumerFailure")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) KafkaConsumerFailure() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KafkaConsumerFailure")
}

func (_m *MockMetricsCollector) KafkaProducerFailure() error {
	ret := _m.ctrl.Call(_m, "KafkaProducerFailure")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) KafkaProducerFailure() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KafkaProducerFailure")
}

func (_m *MockMetricsCollector) Size(_param0 string, _param1 string, _param2 string, _param3 []string, _param4 int64) error {
	ret := _m.ctrl.Call(_m, "Size", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) Size(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size", arg0, arg1, arg2, arg3, arg4)
}

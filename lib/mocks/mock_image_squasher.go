// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/furan/lib/squasher (interfaces: ImageSquasher)

package mocks

import (
	squasher "github.com/dollarshaveclub/furan/lib/squasher"
	context "golang.org/x/net/context"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// MockImageSquasher is a mock of ImageSquasher interface
type MockImageSquasher struct {
	ctrl     *gomock.Controller
	recorder *MockImageSquasherMockRecorder
}

// MockImageSquasherMockRecorder is the mock recorder for MockImageSquasher
type MockImageSquasherMockRecorder struct {
	mock *MockImageSquasher
}

// NewMockImageSquasher creates a new mock instance
func NewMockImageSquasher(ctrl *gomock.Controller) *MockImageSquasher {
	mock := &MockImageSquasher{ctrl: ctrl}
	mock.recorder = &MockImageSquasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockImageSquasher) EXPECT() *MockImageSquasherMockRecorder {
	return _m.recorder
}

// Squash mocks base method
func (_m *MockImageSquasher) Squash(_param0 context.Context, _param1 io.Reader, _param2 io.Writer) (*squasher.SquashInfo, error) {
	ret := _m.ctrl.Call(_m, "Squash", _param0, _param1, _param2)
	ret0, _ := ret[0].(*squasher.SquashInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Squash indicates an expected call of Squash
func (_mr *MockImageSquasherMockRecorder) Squash(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Squash", arg0, arg1, arg2)
}
